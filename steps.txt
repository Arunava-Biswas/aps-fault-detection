Step1: 
- Whether git is install or not? To check just type "git" in the terminal.
- Here we are creating the project with python 3.8.10 version.
- The default mongoDB connection is: "mongodb://localhost:27017", it can be found in the 'main.py' file.


Step2:
- Create dataset inside the mongoDB database.
- To download the dataset from 'git' we use the command 'wget' in terminal.
- To download the data write in the following format and hit enter:
    wget url
- As here it is:
abc@4816ef265cb4:~/workspace$ wget https://raw.githubusercontent.com/avnyadav/sensor-fault-detection/main/aps_failure_training_set1.csv
- After doing this the dataset gets downloaded.
- Now we need to upload the data to mongoDB. To do this we will create the 'data_dump.py' file.


Step3:
- Now we will read the data from the mongoDB and do the Machine Learning project.
- But before we need to add this codes in the github using git commands.
- So go to github and create a new repo. While creating repo (aps-fault-detection) just select Add.gitignore option as 'python'.
- 1st we need to see is there any repositore already attach to this code or not? to check type the following command
    git remote -v

abc@4816ef265cb4:~/workspace$ git remote -v
origin  https://github.com/iNeuron-Pvt-Ltd/neurolab-mongodb-python (fetch)
origin  https://github.com/iNeuron-Pvt-Ltd/neurolab-mongodb-python (push)

- Now to remove the origin so we can create our own repo as origin type:
    git remote remove origin
- Again to check just type:
    git remote -v

abc@4816ef265cb4:~/workspace$ git remote remove origin
abc@4816ef265cb4:~/workspace$ git remote -v

- Now we need to add our repo as origin type:
    git remote add origin <give your url>

abc@4816ef265cb4:~/workspace$ git remote add origin https://github.com/Arunava-Biswas/aps-fault-detection.git
abc@4816ef265cb4:~/workspace$ git remote -v
origin  https://github.com/Arunava-Biswas/aps-fault-detection.git (fetch)
origin  https://github.com/Arunava-Biswas/aps-fault-detection.git (push)

- Now we need to push the changes to make the changes applicable. Here do the authentication steps to allow the repo to joined with this project. type:
    git push origin main

- Here we will get some error message, as there are changes ('.gitignore' file) in the github repo which are not shown here on this project so to make them one first we have to fetch (pull the changes from the github to the local system) the repo here then create the commit and then do the push. This is the 'merge conflict'.

- So either we need to delete the commits in the github repo or we need to delete the commits in our local system as the problem is that the commits are not matching. Here we are deleting the commits in the local repo.
- Go to hidden folder '.git'

abc@4816ef265cb4:~/workspace$ ls -a
.  ..  aps_failure_training_set1.csv  data_dump.py  .git  main.py  README.md  requirements.txt  steps.txt  .vscode

- Now go to inside the '.git' folder

abc@4816ef265cb4:~/workspace$ cd .git/
abc@4816ef265cb4:~/workspace/.git$ ls
branches  config  description  FETCH_HEAD  HEAD  hooks  index  info  logs  objects  ORIG_HEAD  packed-refs  refs

- We need to use the following command:
    git reset --soft ID
- The ID is the id of the commit where we want the pointer HEAD to move.
- With soft the codes remained.

abc@4816ef265cb4:~/workspace$ git reset --soft 6afd

- Now we can create a new commit and push it to the repository.

abc@4816ef265cb4:~/workspace$ git add .
abc@4816ef265cb4:~/workspace$ git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   .vscode/extensions.json
        new file:   .vscode/settings.json
        new file:   .vscode/tasks.json
        modified:   README.md
        new file:   aps_failure_training_set1.csv
        new file:   data_dump.py
        new file:   main.py
        new file:   requirements.txt
        new file:   steps.txt

abc@4816ef265cb4:~/workspace$ git config --global user.email arunavabiswas44@gmail.com
abc@4816ef265cb4:~/workspace$ git config --global user.name Arunava-Biswas
abc@4816ef265cb4:~/workspace$ git commit -m "This is the 1st version of code"
[main d0ef23e] This is the 1st version of code
 9 files changed, 36358 insertions(+), 1 deletion(-)
 create mode 100644 .vscode/extensions.json
 create mode 100644 .vscode/settings.json
 create mode 100644 .vscode/tasks.json
 create mode 100644 aps_failure_training_set1.csv
 create mode 100644 data_dump.py
 create mode 100644 main.py
 create mode 100644 requirements.txt
 create mode 100644 steps.txt

 - Here we need to push forcefully
 abc@4816ef265cb4:~/workspace$ git push -f origin main
Enumerating objects: 15, done.
Counting objects: 100% (15/15), done.
Delta compression using up to 64 threads
Compressing objects: 100% (12/12), done.
Writing objects: 100% (15/15), 10.23 MiB | 2.14 MiB/s, done.
Total 15 (delta 0), reused 0 (delta 0)
To https://github.com/Arunava-Biswas/aps-fault-detection.git
 + 728b447...d0ef23e main -> main (forced update)
abc@4816ef265cb4:~/workspace$ 

- Now create a file '.gitignore'
- Then again add, commit and push this to the github repo.
- The usage of ".gitignore":
    - In the source folder may be there are files which we don't want git to track, i.e. we want to prevent git from tracking those files and folders. We put those files and folders in this file.
    - Also we can prevent a very large file from getting uploaded to github by this method.